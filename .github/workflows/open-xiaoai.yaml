# Modified from https://github.com/Tencent/ncnn/blob/master/.github/workflows/linux-arm-cpu-gcc.yml
name: open-xiaoai

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.0.0)"
        required: false
        default: "1.0.0"

concurrency:
  group: arm-linux-gnueabihf-${{ github.ref }}
  cancel-in-progress: true

jobs:
  arm_linux_gnueabihf:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} ${{ matrix.lib_type }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        lib_type: [static]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-arm-${{ matrix.lib_type }}

      - name: cache-toolchain
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: toolchain
          key: gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf

      - name: Download toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        shell: bash
        run: |
          wget https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf.tar.xz
          mkdir $GITHUB_WORKSPACE/toolchain
          tar xvf ./gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf.tar.xz --strip-components 1 -C $GITHUB_WORKSPACE/toolchain

      - name: Display toolchain info
        shell: bash
        run: |
          export PATH=$GITHUB_WORKSPACE/toolchain/bin:$PATH

          arm-linux-gnueabihf-gcc --version

          gcc -x c - <<<'int main(){return 0;}' -o test && objdump -T ./test | grep GLIBC_

      - name: cache-alsa
        uses: actions/cache@v4
        with:
          key: alsa-lib
          path: build-arm-linux-gnueabihf/alsa-lib

      - name: build arm-linux-gnueabihf
        shell: bash
        run: |
          export PATH=$GITHUB_WORKSPACE/toolchain/bin:$PATH

          export CMAKE_CXX_COMPILER_LAUNCHER=ccache
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"

          cmake --version

          lib_type=${{ matrix.lib_type }}

          if [[ $lib_type == "shared" ]]; then
            export BUILD_SHARED_LIBS=ON
          else
            export BUILD_SHARED_LIBS=OFF
          fi

          ./build-open-xiaoai.sh

          ls -lh build-arm-linux-gnueabihf/bin
          ls -lh build-arm-linux-gnueabihf/lib

          file build-arm-linux-gnueabihf/bin/sherpa-onnx

      - name: Copy files
        shell: bash
        run: |
          export PATH=$GITHUB_WORKSPACE/toolchain/bin:$PATH
          arm-linux-gnueabihf-strip --version

          RELEASE_VERSION=${{ inputs.version }}
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

          dst=open-xiaoai-kws-v${RELEASE_VERSION}
          echo "DIST_NAME=${dst}" >> $GITHUB_ENV

          mkdir $dst

          ls -lh build-arm-linux-gnueabihf/install/lib
          cp -a build-arm-linux-gnueabihf/install/bin $dst/
          ls -lh $dst/bin/*
          arm-linux-gnueabihf-strip $dst/bin/*
          ls -lh $dst

          tree $dst

          cd $dst/bin
          zip -r ${dst}.zip ./
          mv ${dst}.zip $GITHUB_WORKSPACE/

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DIST_NAME }}
          path: ${{ env.DIST_NAME }}.zip

      - name: Upload v${{ env.RELEASE_VERSION }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          removeArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          name: v${{ env.RELEASE_VERSION }}
          tag: v${{ env.RELEASE_VERSION }}
          body: ${{ env.DIST_NAME }}
          artifacts: ${{ env.DIST_NAME }}.zip
